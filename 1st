import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        playGame();
    }

    public static void playGame() {
        int MAX_ATTEMPTS = 5;
        int CARGO_AMOUNT = 3;
        int DISTANCE = 7;

        Scanner scanner = new Scanner (System.in);

        while (true) {
            int [] cargoLocations = getRandomCargoLocations(CARGO_AMOUNT, DISTANCE);

            System.out.println ("\nStart! Find all hidden cargo locations!\nYou have 5 attempts to win the game.");

            boolean gameWon = false;
            for (int attempt = 1; attempt <= MAX_ATTEMPTS; attempt++) {
                System.out.println ("\nAttempt " + attempt + ":");
                System.out.print ("Enter " + CARGO_AMOUNT + " guesses (between 1 and " + DISTANCE + "): ");

                int [] guesses = getUserGuesses(scanner, CARGO_AMOUNT, DISTANCE);

                int correctCount = ifGuessesTrue(cargoLocations, guesses);

                if (correctCount == CARGO_AMOUNT) {
                    System.out.println ("\nCongratulations! You found all the cargo!");
                    gameWon = true;
                    break;
                } else if (correctCount == 0) {
                    System.out.println ("You couldn't find any of them.");
                } else {
                    System.out.println ("You found " + correctCount + " cargo.");
                }
            }

            if (!gameWon) {
                System.out.println ("\nGame over! You couldn't find all hidden cargo.");
                System.out.println (Arrays.toString(cargoLocations));
            }

            boolean validInput = false;
            while (!validInput) {
                System.out.println ("\nDo you want to try again? (write yes or no): ");
                String playAgain = scanner.next();
                if (playAgain.equalsIgnoreCase("no")) {
                    System.out.println ("\nGoodbye!");
                    return;
                } else if (playAgain.equalsIgnoreCase("yes")) {
                    validInput = true;
                } else {
                    System.out.println("Answer only yes or no!");
                }
            }
        }
    }

    public static int[] getRandomCargoLocations(int countOfCargo, int intervalOfHidden) {
        Random random = new Random();
        int [] locations = new int[countOfCargo];
        boolean [] used = new boolean[intervalOfHidden + 1];
        int filled = 0;

        while (filled < countOfCargo) {
            int loc = random.nextInt(intervalOfHidden) + 1;
            if (!used[loc]) {
                locations[filled] = loc;
                used[loc] = true;
                filled++;
            }
        }
        return locations;
    }
    
    public static int[] getUserGuesses(Scanner scanner, int countOfHidden, int intervalOfHidden) {
        int[] guesses = new int[countOfHidden];
        while (true) {
            try {
                String input = scanner.nextLine();
                String[] inputs = input.trim().split("\\s+");


                if (inputs.length != countOfHidden) {
                    throw new IllegalArgumentException("You must enter exactly " + countOfHidden + " numbers.");
                }

                for (int i = 0; i < countOfHidden; i++) {
                    int guess = Integer.parseInt(inputs[i]);
                    if (guess < 1 || guess > intervalOfHidden) {
                        throw new IllegalArgumentException("Numbers must be between 1 and " + intervalOfHidden + ".");
                    }
                    guesses[i] = guess;
                }
                break;

            } catch (NumberFormatException e) {
                System.out.print("Error! Enter valid numbers only.\nEnter your guess again: ");
            } catch (IllegalArgumentException e) {
                System.out.print("Error! " + e.getMessage() + "\nEnter your guess again: ");
            }
        }
        return guesses;
    }
    
    public static int ifGuessesTrue(int[] cargoLocations, int[] guesses) {
        int countTrueGuesses = 0;
        for (int cargoLocation : cargoLocations) {
            for (int guess : guesses) {
                if (cargoLocation == guess) {
                    countTrueGuesses++;
                    break;
                }
            }
        }
        return countTrueGuesses;
    }
}
